{"version":3,"sources":["components/Wrapper/index.js","components/TopWrap/index.js","components/Title/index.js","components/Instructions/index.js","components/CorrectGuesses/index.js","components/BestScore/index.js","components/FaceCard/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","TopWrap","Title","Instructions","CorrectGuesses","BestScore","FaceCard","alt","name","id","onClick","src","image","clicked","isClicked","imageArray","shuffle","array","sort","Math","random","App","state","correctGuesses","bestScore","clickedArray","handleClick","event","preventDefault","console","log","target","clickedID","indexOf","setState","concat","alert","this","map","x","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+sDAOeA,MAJf,SAAiBC,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAME,W,MCG1BC,MAJf,SAAiBH,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAME,W,MCG1BE,MAJf,SAAeJ,GACb,OAAO,wBAAIC,UAAU,SAASD,EAAME,W,MCGvBG,MAJf,SAAsBL,GACpB,OAAO,yBAAKC,UAAU,gBAAgBD,EAAME,W,MCG/BI,MAJf,SAAwBN,GACtB,OAAO,yBAAKC,UAAU,kBAAkBD,EAAME,W,MCGjCK,MAJf,SAAmBP,GACjB,OAAO,yBAAKC,UAAU,aAAaD,EAAME,W,MCS5BM,MAVf,SAAkBR,GAChB,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,iBACb,yBAAKQ,IAAKT,EAAMU,KAAMC,GAAIX,EAAMW,GAAIC,QAASZ,EAAMY,QAASC,IAAKb,EAAMc,MAAOC,QAASf,EAAMgB,e,OCGjGC,EAAaH,EAIjB,SAASI,EAAQC,GACfA,EAAMC,MAAK,kBAAMC,KAAKC,SAAW,MAHnCJ,EAAQJ,G,IAqFOS,E,4MA7EbC,MAAQ,CACNC,eAAgB,EAChBC,UAAW,EACXC,aAAc,I,EAGhBC,YAAc,SAACC,GAEbA,EAAMC,iBACNC,QAAQC,IAAI,kBAAoBH,EAAMI,OAAOtB,IAC7C,IAAIuB,EAAYL,EAAMI,OAAOtB,GAI1B,EAAKa,MAAMG,aAAaQ,QAAQD,GAAa,GAE9C,EAAKE,UAAS,SAACZ,GAAD,MAAY,CACxBG,aAAcH,EAAMG,aAAaU,OAAO,CAACH,IACzCT,eAAgBD,EAAMC,eAAiB,MAGtC,EAAKD,MAAME,WAAa,EAAKF,MAAMC,gBAEpC,EAAKW,UAAS,SAACZ,GAAD,MAAY,CACxBE,UAAWF,EAAME,UAAYF,EAAMC,mBAGvCP,EAAQJ,IAED,EAAKU,MAAMC,eAAiB,IACnCM,QAAQC,IAAI,oBAAsB,EAAKR,MAAMC,gBAC7Ca,MAAM,4BAEN,EAAKF,UAAS,SAACZ,GAAD,MAAY,CACxBG,aAAc,GACdF,eAAgB,EAChBC,UAAW,OAGL,EAAKF,MAAMG,aAAaQ,QAAQD,IAAc,IACtDI,MAAM,qDAEN,EAAKF,UAAS,SAACZ,GAAD,MAAY,CACxBG,aAAc,GACdF,eAAgB,Q,uDAKZ,IAAD,OACP,OACE,oCACE,kBAAC,EAAD,KACE,kBAAC,EAAD,sBACA,kBAAC,EAAD,wCAA8C,6BAA9C,+CACA,6BACA,kBAAC,EAAD,0BAAmCc,KAAKf,MAAMC,gBAC9C,kBAAC,EAAD,qBAAyBc,KAAKf,MAAME,WACpC,8BAGF,kBAAC,EAAD,KACGT,EAAWuB,KAAK,SAAAC,GAAC,OAChB,kBAAC,EAAD,CACA9B,GAAI8B,EAAE9B,GACND,KAAM+B,EAAE/B,KACRI,MAAO2B,EAAE3B,MACTF,QAAS,EAAKgB,YACdZ,UAAW,mB,GAtEL0B,IAAMC,WCNJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.ac94742c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction TopWrap(props) {\n  return <div className=\"topwrap\">{props.children}</div>;\n}\n\nexport default TopWrap;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Instructions(props) {\n  return <div className=\"Instructions\">{props.children}</div>;\n}\n\nexport default Instructions;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction CorrectGuesses(props) {\n  return <div className=\"CorrectGuesses\">{props.children}</div>;\n}\n\nexport default CorrectGuesses;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction BestScore(props) {\n  return <div className=\"BestScore\">{props.children}</div>;\n}\n\nexport default BestScore;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction FaceCard(props) {\n  return (\n    <div className=\"card\">\n      <div className=\"img-container\">\n        <img alt={props.name} id={props.id} onClick={props.onClick} src={props.image} clicked={props.isClicked} />\n      </div>\n    </div>\n  );\n}\n\nexport default FaceCard;\n","import React from 'react';\nimport Wrapper from \"./components/Wrapper\";\nimport TopWrap from \"./components/TopWrap\";\nimport Title from \"./components/Title\";\nimport Instructions from \"./components/Instructions\";\nimport CorrectGuesses from \"./components/CorrectGuesses\";\nimport BestScore from \"./components/BestScore\";\nimport FaceCard from \"./components/FaceCard\";\nimport image from \"./faces.json\"\n\nlet imageArray = image;\n\nshuffle(image);\n\nfunction shuffle(array) {\n  array.sort(() => Math.random() - 0.5);\n}\n\nclass App extends React.Component {\n  //set initial state of game\n  state = {\n    correctGuesses: 0,\n    bestScore: 0,\n    clickedArray: []\n  }\n  \n  handleClick = (event) => {\n    // console.log(event.target);\n    event.preventDefault();\n    console.log(\"image clicked: \" + event.target.id)\n    let clickedID = event.target.id\n    // console.log(this.state.clickedArray)\n\n    //if statement to check if id was already clicked. \n    if(this.state.clickedArray.indexOf(clickedID) < 0){\n      //Increase correctGuesses score and add ID to clickedArray.\n      this.setState((state) => ({\n        clickedArray: state.clickedArray.concat([clickedID]),\n        correctGuesses: state.correctGuesses + 1,\n      }))\n      //if statement to check if bestScore is equal to or less than correctGuesses score. \n      if(this.state.bestScore <= this.state.correctGuesses) {\n        //Set best score to match correctGuesses score if equal to or less than correctGuesses.\n        this.setState((state) => ({\n          bestScore: state.bestScore = state.correctGuesses\n        }))\n      } \n      shuffle(image);\n    //if score reaches 12 user has won\n    }else if(this.state.correctGuesses > 11)  {\n      console.log(\"correct guesses: \" + this.state.correctGuesses)\n      alert(\"YOU WON!!! PLAT AGAIN???\")\n\n      this.setState((state) => ({\n        clickedArray: [],\n        correctGuesses: 0,\n        bestScore: 0\n      }))\n    //if already clicked end game and restart the score\n    }else if (this.state.clickedArray.indexOf(clickedID) >= 0){\n      alert(\"Sorry you already guessed that one! Start over!!!\")\n\n      this.setState((state) => ({\n        clickedArray: [],\n        correctGuesses: 0\n      }))\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <TopWrap>\n          <Title>CLICK A FACE!</Title>\n          <Instructions>Click on a face to gain points. <br /> Click on the same face twice and you lose!</Instructions>\n          <br />\n          <CorrectGuesses>Correct Guesses : {this.state.correctGuesses}</CorrectGuesses>\n          <BestScore>Best Score : {this.state.bestScore}</BestScore>\n          <br />\n        </TopWrap>\n      \n        <Wrapper>\n          {imageArray.map( x => (\n            <FaceCard\n            id={x.id}\n            name={x.name}\n            image={x.image}\n            onClick={this.handleClick}\n            isClicked={\"false\"}\n            />\n          ))}\n        </Wrapper>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}